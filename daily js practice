// let arr = [1, 2, 3];

// shuffle(arr);

// shuffle(arr);

// shuffle(arr);

// function shuffle(array) {
//     array.sort(() => Math.random() - 0.5);
// }

//   let arr = [1, 2, 3];
//   var result= shuffle(arr);
//   console.log(result)\

// let a = Math.random() * (10-1)
// // let b = Math.round(a)
// console.log(`Random value between 1 and 10 is ${b}`);

// function shuffleArray(inputArray){
//     inputArray.sort(()=> Math.random() - 0.5);
// }

// var demoArray = [1, 3, 5];
// shuffleArray(demoArray);
// console.log(demoArray);

//

// function shuffleArray(inputArray){
//     inputArray.sort(()=> Math.random() - 0.5);
// }

//counts of the appearances for all possible permutations
// var countDic =  {
//     '153': 0,
//     '135': 0,
//     '315': 0,
//     '351': 0,
//     '531': 0,
//     '513': 0,
// };

//Creating the loop
// for( var i = 0; i<1000000; i++){
//     var arr = [ 1 , 5 , 3];
//     shuffleArray(arr);
//     countDic[arr.join('')]++;
// }

// //Print the counts of all possible permutations
// for(var key in countDic){
//     console.log(`${key}: ${countDic[key]}`);
// }

// define object in js as a constructor

// function emp(id,name,salary){
//     this.id=id;
//     this.name=name;
//     this.salary=salary;
//     }
//     console.log(new emp(25,'alok',25000));

// function emp(id,name,salary){
//     this.id=id;
//     this.name=name;
//     this.salary=salary;
//     this.changeSalary=changeSalary;
//     function changeSalary(otherSalary){
//     this.salary=otherSalary;
//     }
//     }
//     e=new emp(103,"Sonoo Jaiswal",30000);
//     document.write(e.id+" "+e.name+" "+e.salary);
//     e.changeSalary(45000);
//     document.write("<br>"+e.id+" "+e.name+" "+e.salary);

// let myArray = [
//     {id: 0, name: "Jhon"},
//     {id: 1, name: "Sara"},
//     {id: 2, name: "Domnic"},
//     {id: 3, name: "Bravo"}
//   ],

//   //Find index of specific object using findIndex method.
//   objIndex = myArray.findIndex((obj => obj.id == 1));

//   //Log object to Console.
//   console.log("Before update: ", myArray[objIndex])

//   //Update object's name property.
//   myArray[objIndex].name = "Laila"

//   //Log object to console again.
//   console.log("After update: ", myArray[objIndex])

// const testarr = [
// {id:101, name:"alok" ,place:"indore"},
// {id:102, name:"ankit" ,place:"indore"},
// {id:103, name:"anuj",place:"bhopal"}
// ]

// let objid = testarr.find((e)=>e.place=="indore")
// console.log(objid)

// let objid = testarr.findIndex((item=>item.id==102))
// // console.log(testarr[objid].name)

// testarr[objid].name = "sanket";

// console.log(testarr)






// **************************recursion in advance java script******************************


// when ever in a function we call same funtion on same on that case we callled a recursion;

// program to count down numbers to 1

// function countDown(number) {

//   // display the number
//   console.log(number);

//   // decrease the number value
//   const newNumber = number - 1;

//   // base case
//   if (newNumber > 0) {
//       setInterval(()=>{countDown(newNumber)},1000);
//     //   countDown(newNumber);
//   }
// }

// countDown(5)

// function factorial(x) {
//   if (x === 0) {
//       return 1;
//   }

//   else {
//       return x * factorial(x - 1);
//   }
// }

// const num = 4;

// if (num > 0) {
//   let result = factorial(num);
//   console.log(`The factorial of ${num} is ${result}`);
// }

// let count = 1;

// function creation
// function increaseCount(count){

//     // increasing the count by 1
//     count += 1;
//     console.log(`${count} and hyello`)
// }

// let id = setInterval(increaseCount, 40000);

// // clearTimeout(id);
// console.log('setTimeout is stopped.')
// increaseCount(2)

// ************************************closer in js******************************************

// var sum=function(a){
//     console.log(`value enter in a is = ${a}`);
//     var b=20;
//     return (c)=>{
//         return a+b+c;
//     }
// }
// var store=sum(10);
// console.log(store(5));


// var sum=function(a,b,c){
//     return{
//     getsumtwo:function(){
//     return a+b;
//     },
//     getsumthree:function(){
//     return a+b+c;
//     }
//     }
// }

// var store1 = sum(10,20,30)
// console.log(store1.getsumtwo(),store1.getsumthree())







// let arr = [1,1,2,2,2,3,3,3,3,4,4,4,4,4]
// let obj={}
// Object.assign(arr,obj)

// console.log(obj)

// let
// arr.map((element,i)=>{
//     if(element==1){
//      console.log(element+=element);
//     }
//     // if(element==1 || element==2 || element==3 || element==4){
//     //     console.log(`${element} is ${}`)
//     // }
// })









// var add = (a,b,c)=>{
//     console.log("hello everyone......")
// function mul(a,b,d){
//     d=a*b;
//     return d;
// }
// mul();
// function div(a,b,e){
//     e=a/b;
//     return e;
// }
// div();
// }

// add(10,20,mul())

// program to display a text using setInterval method
// function greet() {
//     console.log('Hello world');
// }

// var test = setInterval(greet, 1000);
// clearInterval(test)

// bind a funtion

// let user = {
//     firstName: "John"
//     };

//     function func() {
//     console.log((this.firstName));
//     }

//     let funcUser = func.bind(user);
//     console.log(funcUser)
//     funcUser();

// Promise in java script :--- it is a object of javascript which use to manage async operation and manage error and result in effective manner

// var promise = new Promise(function (resolve, reject) {
//   const x = 2;
//   const y = "2";
//   if (x === y) {
//     resolve();
//   } else {
//     reject();
//   }
// });

// promise.then(function () {console.log("value is matched!!");})
// .catch(function(){console.log("value is not matched!!");});



// let url = "http://hrms.webvilleedemo.xyz/dashboard/my_attendance";

// async function logFetch(url) {
//   try {
//     const response = await fetch(url);
//     console.log(response);
//   } catch (err) {
//     console.log("fetch failed", err);
//   }
// }


// let url = "http://hrms.webvilleedemo.xyz/dashboard/my_attendance";

// fetch(url,async(req,res)=>{
//     try{
//         const resp = await req.body
//         console.log(resp);
//     }catch{
//         console.log("not fetch the data");
//     }
// })


// var url = "https://jsonplaceholder.typicode.com/todos"
// fetch(url,async(req,res)=>{
//     data1= await res.json()
//     console.log(data1);
// })


// async function data() {
//     const response = await fetch(url);
//     const data1 = await response.json()
//     console.log(data1);
//   }

//   data();




// var pro = new Promise(url,(resolve,reject)=>{

// })




// serching in array and make 3 no set which addition is Zero

// var list=  [-25, -10, -7, -3, 2, 4, 8, 1]
// var newArray =[];
// sum = 0;
// for(let i = 0; i<list.length; i++)
// {
//  for(let j=i+1; j<list.length; j++)
//  {     
//      for(let k=j+1;k<list.length;k++)   
//      {
//      if((list[i]+list[j]+list[k])==sum){        
//      newArray.push([list[i],list[j],list[k]]);       
//     }
//   }
// }
//  }
// console.log(newArray)


// var list = [-25, -10, -7, -3, 2, 4, 8, 10];
// sum = 0;
// var arr1 = [];
// var finalarr = [];

// const findSumZero = (arr) => {
//   for (let i = 0; i < arr.length - 2; i++) {
//     for (let j = i + 1; j < arr.length - 1; j++) {
//       for (let k = j + 1; k < arr.length; k++) {
//         if (arr[i] + arr[j] + arr[k] === sum) {
//           arr1.push(arr[i], arr[j], arr[k]);
//         }
//       }
//     }
//   }
//   return arr1;
// };
// findSumZero(list);

// while (arr1.length) {
//   finalarr.push(arr1.splice(0, 3));
// }

// console.log(finalarr);



// let set = new Set();
// set.add("alok")
// set.add("kumar")
// set.add("chaurasia")

// // console.log(set)


// console.log(set.has())



// function computeSum(arr){
//   if(arr.length === 1){
//     return arr[0];
//   }
//   else{
//     return arr.pop() + computeSum(arr);
//   }
// }

// console.log(computeSum([7, 8, 9, 99]));



// function higherOrder(fn) {
//   fn();
// }
     
// higherOrder(function() { console.log("Hello world") }); 



// var shortby = (list, key) => {
//   let newdata = {};
//   list.forEach(item => {
    
//       let newItem = Object.assign({}, item);
//       delete newItem[key];
//       newdata[item[key]] = newdata[item[key]] || [];
//       newdata[item[key]].push(newItem);
//   });
//   return newdata;
// };
// let result= shortby(data, 'tm_number')

// console.log(result);



// closer in js :-closer is a method where we declare another function in a function
// and child function can access the property and value of the parent functon..

// var sum=(a)=>{
//   console.log("live viewers" +a);
//   let c=5;
//   return function add(b){
//   return a+b+c;
//   }
// }

// store = sum(5);
// console.log(store(20));



// constructor in object :

// function Person(name,age,gender){
//   this.name = name;
//   this.age = age;
//   this.gender = gender;
// }

// var person1 = new Person("Vivek", 76, "male");
// console.log(person1);

// var person2 = new Person("Courtney", 34, "female");
// console.log(person2);


// let arr =[1,1,1,1,2,2,2,3,3,3,5,6]
// let count=[]
// for(let value of arr ){
// count[value]=count[value]?count[value]+1:1;
// // console.log(count);
// }

// console.log(count[5])




// const a = [4,3,6,3,4,3,56,66,56,78,87,78]
// function count_duplicate(a){
//  let counts = {}
//  for(let i =0; i < a.length; i++){ 
//      if (counts[a[i]]){
//      counts[a[i]] += 1
//      } else {
//      counts[a[i]] = 1
//      }
//     }  
//     for (let prop in counts){
//         if (counts[prop] >= 2){
//             console.log(prop + " counted: " + counts[prop] + " times.")
//         }
//     }
//   console.log(counts)
// }
// count_duplicate(a)



// let obj1 = {x:'Hello', y:'Bye'};
// let clonedObj1 = {...obj1}; // Spreads and clones obj1
// console.log(clonedObj1);



/*
Generator function are those function which directly not exectuted during the time of calling 
it store 

*/

// function * generatorFunction() { // Line 1
//   console.log('This will be executed first.');
//   yield 'Hello, ';   // Line 2
//   console.log('I will be printed after the pause');  
//   yield 'World!';
// }
// const generatorObject = generatorFunction(); // Line 3
// console.log(generatorObject.next().value); // Line 4
// console.log(generatorObject.next().value); // Line 5




// obj = {num1:3,num2:4,num3:5}
// const newSet2 = new WeakSet([obj]);
// console.log(newSet2.has(obj))

// function func1(){
//   setTimeout(()=>{
//     console.log(x);
//     console.log(y);
//   },3000);

//   var x = 2;
//   let y = 12;
// }
// // console.log(x)
// func1();

// function func2(){
//   for(var i = 0; i < 3; i++){
//     setTimeout(()=> console.log(i),2000);
// }
// }
// func2();


// (function(){
//   setTimeout(()=> console.log(1),2000);
//   console.log(2);
//   setTimeout(()=> console.log(3),0);
//   console.log(4);
// })();




// var arr = [4, 2, 1, -10, 9]
// arr.reduce(function(a, b) {
//  return a < b ? a : b
// });

// var array = [{
//   key: 'one',
//   value: 1
//  }, {
//   key: 'two',
//   value: 2
//  }, {
//   key: 'three',
//   value: 3
//  }];


//  array.reduce(function(obj, current) {
//   obj[current.key] = current.value;
//   return obj;
//  }, {});

// var uniqueArray = ['a', 1, 'a', 2, '1', 1].
// filter(function(value, index, self) {
//   return self.indexOf(value) === index;
// })

//   console.log(uniqueArray)


// let str = [alok]
// str.reverse()
// console.log(str)





// arrow function some special case 


// let myFunc = {  
//   showArgs : () => { 
//   console.log(...arguments); 
//  } 
// }; 
// myFunc.showArgs(1, 2, 3, 4);

// or 



// let myFunc = {  
//     showArgs : (a,b,c,d) => { 
//     console.log(a,b,c,d); 
//    } 
//   }; 
//   myFunc.showArgs(1, 2, 3, 4);



// const fs = require('fs')

// const getFile = (fileName) => {
//   return new Promise((resolve, reject) => {
//     fs.readFile(fileName, (err, data) => {
//       if (err) {
//         reject(err)  
//         return
//       }
//       resolve(data)
//     })
//   })
// }

// getFile('back.png')
// .then(data => console.log(data))
// .catch(err => console.error(err))


// var arr=[{'name':'alok' ,'age':28 , 'city':'indore'},
// {'name':'ankit' ,'age':25 , 'city':'bhopal'},
// {'name':'rahul' ,'age':23 , 'city':'ujjain'}]

// var arr1=[{'age':23 , 'city':'ujjain'}]


// console.log(arr.concat(arr1));


// var keys = ["name", "date", "age"];
// var values = ["John", "25-08-1989", "25"];
// var result = {};
// for (var i = 0; i < keys.length; i++) {
//         result[keys[i]] = values[i];
// }
// console.log(result);



// // for(let okk of Object.values(arr[2])){
// //     console.log(okk)
// // }

// for(let okk of Object.keys(arr[2])){
//     console.log(okk)
// }

// var keys = {};
// var map = new Map(); 
// for(var i = 0; i < keys.length; i++){ 
//     map.set(keys[i], values[i]); 
// }




// var user=[{'userid':123,'username':'alok'},
// {'userid':231,'username':'rahul'}
// ,{'userid':321,'username':'prince'}]


// var product=[{'productid':789,'productname':'shirts','customerid':123},
// {'productid':786,'productname':'t-shirts','customerid':231},
// {'productid':799,'productname':'cap','customerid':123}]


// var test=[{}]
// user.push(product)
// Object.assign(user,product)
// console.log(product)


// console.log(user)

// object.entries() method :-

/*

const db1 = {name:'alok',middlename:'kumar',lastname:'chaurasia'}

for(const [key,values] of Object.entries(db1)){
    console.log(`${key} - ${values}` )
}
*/

// const db1 = {name:'alok',middlename:'kumar',lastname:'chaurasia'}

// Object.seal(db1)

// db1.name = 'ashish';
// console.log(Object.isSealed(db1))
// delete db1.name;
// console.log(db1)


// const entries = new Map([
//     ['foo', 'bar'],
//     ['baz', 42]
//   ]);
  
//   const obj = Object.fromEntries(entries);
  
//   console.log(obj);


// async function test() {

//     let promise = new Promise((resolve, reject) => {
//       setTimeout(() => resolve("done!"), 1000)
//     });
  
//     let result = await promise; // wait until the promise resolves (*)
  
//     console.log(result) // "done!"
//   }
  
//   test();


// greet();

// var greet = function () {
//     console.log('Hi, there.');
// }


// let arr1= [1,2,3,3,6,4,5,2,2,1]
// let arr2=new Set(arr1)
// console.log([...arr2])

// let arr =[1,1,1,1,2,2,2,3,3,3,5,6]
// let count=[]
// for(let value of arr ){
// count[value]=count[value]?count[value]+1:1;
// }
// console.log(count[1])



// class Counter {
//     #i=1;
//     print(){
//         console.log(this.#i);
//     }
// }
// const call = new Counter();
// call.print();

/*
class Counter {
    #i=1;
    #print(){
        console.log(this.#i);
    }
    publicfun(){
        this.#print()
    }
}
const call = new Counter();
call.#print(); // during the time of calling it show error because private variavle can not access by private funtion.
call.publicfun();
*/

// const nums = [1,2,3,4,5,6,7];

// console.log(nums.length-1)
// console.log(nums[nums.length-1 ]);
// console.log(nums.at(-2))


const someobject = {
    someprop:'hello'
}
// console.log(someobject.hasOwnProperty("someprop")) // ES6
console.log(Object.hasOwn(someobject,'someprop')) // ES7

